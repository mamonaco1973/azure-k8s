# =============================================================
# Deployment: flask-app (Python Web App on Port 8000)
# =============================================================
apiVersion: apps/v1                   # API group for managing Deployments
kind: Deployment                      # Declares a Kubernetes Deployment resource
metadata:
  name: flask-app                     # Name of the Deployment object

spec:
  replicas: 2                         # Start with 2 replicas (pods) of the Flask app

  selector:
    matchLabels:
      app: flask-app                  # Match Pods with the label app=flask-app

  template:
    metadata:
      labels:
        app: flask-app                # Label applied to each Pod for selection by Service and HPA

    spec:
      serviceAccountName: cosmosdb-access-sa  # Use a specific service account for access to cosmosdb-sa       
      containers:
        - name: flask-app                       # Container name within the Pod
          image: ${account_id}.dkr.ecr.us-east-2.amazonaws.com/flask-app:flask-app-rc1
                                                # Pull the image from Amazon ECR using a release candidate tag

          ports:
            - containerPort: 8000               # Expose port 8000 (Flask app default)

          env:
            - name: FLASK_ENV
              value: "production"               # Set the environment variable for production mode

          livenessProbe:
            httpGet:
              path: /gtg                        # Health check endpoint (same as ALB health check)
              port: 8000                        # Target port inside container
            initialDelaySeconds: 5              # Delay before the first check after startup
            periodSeconds: 10                   # Frequency of health checks
            failureThreshold: 3                 # Pod is considered unhealthy after 3 consecutive failures

---
# =============================================================
# Service: flask-app-service (Exposes Flask app via NodePort)
# =============================================================
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service             # Name of the Service resource

spec:
  selector:
    app: flask-app                    # Route traffic to Pods with label app=flask-app

  ports:
    - protocol: TCP                  # Use TCP protocol for HTTP traffic
      port: 80                       # External port (clients connect here)
      targetPort: 8000              # Forward traffic to container port 8000

  type: NodePort                    # Expose service on a random high port across all cluster nodes

---
# =============================================================
# Ingress: flask-app-ingress (AKS Ingress via NGINX Controller)
# =============================================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flask-app-ingress

  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^(/)$ $1/ redirect;

  labels:
    app: flask-app

spec:
  ingressClassName: nginx  # Use the NGINX ingress controller in AKS

  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: flask-app-service
                port:
                  number: 80

---
# =============================================================
# Horizontal Pod Autoscaler: flask-app-hpa
# =============================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: flask-app-hpa                # Name of the HPA resource

spec:
  scaleTargetRef:
    apiVersion: apps/v1             # Target the Deployment API group
    kind: Deployment                # Type of resource to scale
    name: flask-app                 # Target the "flask-app" Deployment for scaling

  minReplicas: 2                    # Minimum number of pods to maintain
  maxReplicas: 5                    # Maximum number of pods that can be created based on load

  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization         # Target CPU utilization metric
          averageUtilization: 60    # Target average CPU usage at 60% before scaling up
